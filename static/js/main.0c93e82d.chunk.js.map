{"version":3,"sources":["components/TodoList/User/UserDetails/UserDetails.js","components/TodoList/User/User.js","components/TodoList/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["UserDetails","props","react_default","a","createElement","className","href","website","phone","companyName","User","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","detailed","showingLogin","email","userInfo","name","username","company","_detalizeClicked","bind","assertThisInitialized","_showLogin","_hideLogin","setState","details","UserDetails_UserDetails","login","onClick","onMouseOver","onMouseLeave","CSSTransitionGroup_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","React","Component","TodoItem","completed","title","_stateChanged","htmlFor","type","id","checked","onChange","User_User_User","TodoList","todosData","loaded","onLoading","disabled","value","list","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","push","TodoList_TodoItem_TodoItem","err","return","_this$_getButtonsAttr","_getButtonsAttr","content","_getStatesContent","App","components_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c93e82d.chunk.js","sourcesContent":["import React from 'react';\nimport './UserDetails.css';\n\nexport default function UserDetails(props) {\n  return (\n    <div className=\"info-details\">\n      <ul>\n        <li>\n          User website: <a href={props.website}>\n            {props.website}\n          </a>\n        </li>\n        <li>Phone: {props.phone}</li>\n        <li>Company: \"{props.companyName}\"</li>\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport UserDetails from './UserDetails/UserDetails';\nimport './User.css';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\n\nexport default class User extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      detailed: false,\n      showingLogin: false,\n    };\n    this.email = 'mailto:' + props.userInfo.email;\n    this.name = props.userInfo.name;\n    this.username = props.userInfo.username;\n    this.website = 'https://' + props.userInfo.website;\n    this.phone = props.userInfo.phone;\n    this.companyName = props.userInfo.company.name;\n\n    this._detalizeClicked = this._detalizeClicked.bind(this);\n    this._showLogin = this._showLogin.bind(this);\n    this._hideLogin = this._hideLogin.bind(this);\n  }\n\n  _detalizeClicked() {\n    this.setState({\n      detailed: !this.state.detailed,\n    })\n  }\n\n  _showLogin() {\n    this.setState({\n      showingLogin: true,\n    });\n  }\n\n  _hideLogin() {\n    this.setState({\n      showingLogin: false,\n    });\n  }\n\n  render() {\n    const details = this.state.detailed\n      ? (\n        <div className=\"login\">\n          <UserDetails\n            website = {this.website}\n            phone = {this.phone}\n            companyName = {this.companyName}\n          />\n        </div>\n      ) : '';\n    const login = this.state.showingLogin\n      ? (<div className='login'>Write to user {this.username}</div>)\n      : '';\n\n    return (\n      <div className='info-user'>\n        <div className='info-header'>\n          {/*<CSSTransitionGroup*/}\n          {/*  transitionName={ {*/}\n          {/*    enter: 'detalizer',*/}\n          {/*    enterActive: '.animation-active',*/}\n          {/*    leave: '.animation-active',*/}\n          {/*    leaveActive: 'detalizer',*/}\n          {/*  } }*/}\n          {/*  transitionEnterTimeout={300}*/}\n          {/*  transitionLeaveTimeout={300}*/}\n          {/*>*/}\n            <span className='detalizer' onClick={this._detalizeClicked}>\n              {this.state.detailed ? '--' : '+'}\n            </span>\n          {/*</CSSTransitionGroup>*/}\n          <a\n            href={this.email}\n            onMouseOver={this._showLogin}\n            onMouseLeave={this._hideLogin}\n          >{this.name}</a>\n          <CSSTransitionGroup\n            transitionName='detailed'\n            transitionEnterTimeout={800}\n            transitionLeaveTimeout={500}\n          >\n            {login}\n            {details}\n          </CSSTransitionGroup>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport User from '../User/User';\nimport './TodoItem.css';\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      completed: props.completed,\n    };\n    this.title = props.title;\n    this.userInfo = props.userInfo;\n    this._stateChanged = this._stateChanged.bind(this);\n  }\n\n  _stateChanged() {\n    this.setState({\n      completed: !this.state.completed,\n    });\n  }\n\n  render() {\n    return (\n      <section\n        className={this.state.completed ? 'list-item green' : 'list-item red'\n      }>\n        <div className='item-subsection main-content'>\n          <label\n            htmlFor='state-checkbox'\n            className={this.state.completed\n              ? 'todo-state item-subsection green'\n              : 'todo-state item-subsection red'\n            }>\n            <input\n              type='checkbox'\n              name='state-checkbox'\n              id='state-checkbox'\n              checked={this.state.completed}\n              onChange={this._stateChanged}\n            />\n            {\n              this.state.completed\n                ? 'Done'\n                : 'In process'\n            }\n          </label>\n          <div className='todo-title  item-subsection'>{this.title}</div>\n        </div>\n        <User userInfo={this.userInfo}/>\n      </section>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, {Component} from 'react';\nimport TodoItem from './TodoItem/TodoItem';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todosData: [],\n      loaded: null,\n    }\n  }\n\n  _getButtonsAttr(onLoading) {\n    if (onLoading) {\n      return {\n        className: 'load-button',\n        disabled: onLoading,\n        value: 'Loading...',\n      }\n    }\n    return {\n      className: 'load-button-disabled',\n      disabled: !onLoading,\n      value: 'Load data',\n    }\n  }\n\n  _getStatesContent(loaded) {\n    if (loaded === true) {\n      const list = [];\n\n      for (const item of this.state.todosData) {\n        list.push(<TodoItem item={item} />);\n      }\n      return list;\n    } else {\n      const {\n        className,\n        disabled,\n        value,\n      } = this._getButtonsAttr(loaded !== null);\n\n      return (\n\n        <button\n          className={className}\n          disabled={disabled}\n          value={value}\n        ></button>\n      );\n    }\n  }\n\n  render() {\n    const content = this._getStatesContent(this.state.loaded);\n\n    return (\n      <div className='container'>\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList/TodoList\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>ToDo. . .</h1>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}